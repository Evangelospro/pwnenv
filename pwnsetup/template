#!/usr/bin/python3
# Writeup by $NAME
import os
from pwnscripts import * #pip install pwnscripts
import angr
import claripy

sl = lambda x: io.sendline(x.encode() if type(x) == str else x)
sla = lambda x, y: io.sendlineafter(
    x.encode() if type(x) == str else x, y.encode() if type(y) == str else y
)
se = lambda x: io.send(x.encode() if type(x) == str else x)
sa = lambda x, y: io.sendafter(
    x.encode() if type(x) == str else x, y.encode() if type(y) == str else y
)

# from string import printable
printable="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#%&\\\'()\}\{_"

dir_path =  os.path.dirname(__file__)
patch = $patch
if patch is not None:
    subprocess.call(f"pwninit --no-template --bin $binary", shell=True)
    binary_path = dir_path + "/$binary" + "_patched"
else:
    binary_path = dir_path + f"/$binary"
elf = context.binary = ELF(binary_path, checksec=True)

try:
    host = "$host"
    port = $port
except NameError:
    host = "None"
    Port = "None"

def pwn_ssh():
    user = input("ssh user:")
    password = input("ssh password: ")
    return ssh(user=user, host=host, port=port, password=password)

def pwn_remote():
    return remote(host, port)

def pwn_gdb():
    gdbscript = """
    init-pwndbg
    continue
    """
    return gdb.debug(elf.path, gdbscript)

def pwn_local():
    return process(elf.path, cwd=dir_path)
    
def angr_init(payload):
    base_addr = 0x00000000
    project = angr.Project(binary_path, main_opts={'base_addr': base_addr})
    state = project.factory.full_init_state(
    args=[binary_path],
    add_options=angr.options.unicorn,
    stdin=payload
    )
    return project, state
    
def is_successful(state):
    output = state.posix.dumps(sys.stdout.fileno())
    if b'That key is valid.' in output:
        return True
    return False

def hook(l=None):
    if l:
        locals().update(l)
    import IPython
    IPython.embed(banner1='', confirm_exit=False)
    exit(0)    
    
# Find offset to EIP/RIP for buffer overflows
def find_xip(payload, arch):
    print(f"Finding offset to EIP/RIP for {arch}...")
    # Launch process and send the payload
    io = process(elf.path)
    io.recv()
    io.sendline(payload)
    # Wait for the process to crash
    io.wait()
    # Print out the address of EIP/RIP at the time of crashing
    if "i386" in arch:
        xip_offset = cyclic_find(io.corefile.pc)  # x86
    elif "64" in arch:
        xip_offset = cyclic_find(io.corefile.read(io.corefile.sp, 4))  # x64
    info('The EIP/RIP offset is ')
    success(str(xip_offset))
    return int(xip_offset)

if args.R or args.S or args.L:
    analysis = "static"
elif args.GDB:
    analysis = "gdb"
elif args.A:
    analysis = "dynamic"
else:
    print("Please select an argument from [REMOTE(R), LOCAL(L), SSH(S), GDB(GDB), ANGR(A)]")
    quit()
    
def start():
    if args.R:
        return pwn_remote()
    elif args.S:
        return pwn_ssh()
    elif args.L:
        return pwn_local()
    elif args.GDB:
        return pwn_gdb()
        
if analysis == "static" or analysis == "gdb":
    padding = find_xip(cyclic(250), elf.get_machine_arch())
    io = start()  
elif analysis == "dynamic":
    target_addr = 0x0000000000000000
    avoid_addr = 0x0000000000000000
    payload = ''
    project, state = angr_init(payload)
    simgr = project.factory.simulation_manager(state)

# ===============================================================================================
#                                 !!!EXPLOIT GOES HERE!!!
# ===============================================================================================
#io.interactive()